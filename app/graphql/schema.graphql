interface ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

type Annotation implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  favorited: Boolean!
  id: ID!
  text: String!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
The connection type for Annotation.
"""
type AnnotationConnection {
  """
  A list of edges.
  """
  edges: [AnnotationEdge]

  """
  A list of nodes.
  """
  nodes: [Annotation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnnotationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Annotation
}

"""
Properties for an annotation
"""
input AnnotationInput {
  text: String!
  verseId: ID!
}

"""
Autogenerated input type of CreateAnnotation
"""
input CreateAnnotationInput {
  annotationInput: AnnotationInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAnnotation
"""
type CreateAnnotationPayload {
  annotation: Annotation!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  isAdmin: Boolean!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

type Error {
  """
  The field the error relates to
  """
  field: String!

  """
  The error message
  """
  message: String!
}

"""
Autogenerated input type of FavoriteAnnotation
"""
input FavoriteAnnotationInput {
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of FavoriteAnnotation
"""
type FavoriteAnnotationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of InvalidateToken
"""
input InvalidateTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of InvalidateToken
"""
type InvalidateTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean!
}

type Mutation {
  """
  Create an annotation
  """
  createAnnotation(input: CreateAnnotationInput!): CreateAnnotationPayload

  """
  Admin ability to create a user
  """
  createUser(input: CreateUserInput!): CreateUserPayload

  """
  Favorites an annotation
  """
  favoriteAnnotation(input: FavoriteAnnotationInput!): FavoriteAnnotationPayload

  """
  Invalidates a user's token
  """
  invalidateToken(input: InvalidateTokenInput!): InvalidateTokenPayload

  """
  When an access token expires this mutation should be hit with a valid
  refresh token. It will issue a new access token and a new refresh token.
  """
  refreshTokens(input: RefreshTokensInput!): RefreshTokensPayload

  """
  Resets the user's password and returns valid tokens
  """
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload

  """
  Triggers a reset password email
  """
  sendResetPassword(input: SendResetPasswordInput!): SendResetPasswordPayload

  """
  Sign the user in
  """
  signInUser(input: SignInUserInput!): SignInUserPayload

  """
  Suspend a user
  """
  suspendUser(input: SuspendUserInput!): SuspendUserPayload

  """
  Unfavorites an annotation
  """
  unfavoriteAnnotation(input: UnfavoriteAnnotationInput!): UnfavoriteAnnotationPayload

  """
  Unsuspend a user
  """
  unsuspendUser(input: UnsuspendUserInput!): UnsuspendUserPayload

  """
  Updates the password of the current user
  """
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Get an annotation
  """
  annotation(annotationId: ID!): Annotation!

  """
  Gets all public annotations
  """
  annotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    verseId: ID!
  ): AnnotationConnection!

  """
  Returns the currently logged in user
  """
  me: User

  """
  Gets all of my annotations
  """
  myAnnotations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnnotationConnection!

  """
  Return the specified user
  """
  user(userId: ID!): User!

  """
  Get all users
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Get an annotation
  """
  verse(verseId: ID!): Verse!
}

"""
Autogenerated input type of RefreshTokens
"""
input RefreshTokensInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  refreshToken: String!
}

"""
Autogenerated return type of RefreshTokens
"""
type RefreshTokensPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  resetPasswordToken: String!
}

"""
Autogenerated return type of ResetPassword
"""
type ResetPasswordPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of SendResetPassword
"""
input SendResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of SendResetPassword
"""
type SendResetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of SignInUser
"""
input SignInUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of SuspendUser
"""
input SuspendUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of SuspendUser
"""
type SuspendUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of UnfavoriteAnnotation
"""
input UnfavoriteAnnotationInput {
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnfavoriteAnnotation
"""
type UnfavoriteAnnotationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
Autogenerated input type of UnsuspendUser
"""
input UnsuspendUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of UnsuspendUser
"""
type UnsuspendUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of UpdatePassword
"""
input UpdatePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String!
  newPassword: String!
}

"""
Autogenerated return type of UpdatePassword
"""
type UpdatePasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

type User implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  isAdmin: Boolean!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

type Verse implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  id: ID!
  numberOfAnnotations: Int
  numberOfMyAnnotations: Int

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}