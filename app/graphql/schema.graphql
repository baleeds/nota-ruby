interface ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of AddBookByIsbn
"""
input AddBookByIsbnInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  isbn: String!
}

"""
Autogenerated return type of AddBookByIsbn
"""
type AddBookByIsbnPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
}

"""
Autogenerated input type of AddBookManually
"""
input AddBookManuallyInput {
  authors: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  imageUrl: String
  pageCount: Int
  publisher: String
  title: String!
}

"""
Autogenerated return type of AddBookManually
"""
type AddBookManuallyPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
}

type Book implements ActiveRecord {
  authors: String
  averageRating: Float

  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  currentlyCheckedOut: Boolean!
  description: String
  id: ID!
  imageUrl: String
  isCurrentlyCheckedOut: Boolean!
  isCurrentlyCheckedOutByMe: Boolean!
  isFavoritedByMe: Boolean
  isLostOrRemoved: Boolean!
  myRating: Int
  pageCount: Int
  publisher: String
  rental: Rental
  title: String!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Book.
"""
type BookConnection {
  """
  A list of edges.
  """
  edges: [BookEdge]

  """
  A list of nodes.
  """
  nodes: [Book]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BookEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Book
}

"""
Properties for a Book
"""
input BookInput {
  authors: String
  description: String
  imageUrl: String
  pageCount: Int
  publisher: String
  title: String
}

"""
A description of a books quality
"""
enum BookRating {
  EXCELLENT
  GOOD
  OK
  POOR
  TERRIBLE
}

"""
Possible columns to sort books by
"""
enum BookSortByType {
  AUTHORS
  CREATED_AT
  TITLE
}

"""
Autogenerated input type of CheckoutBook
"""
input CheckoutBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CheckoutBook
"""
type CheckoutBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  isAdmin: Boolean!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

type Error {
  """
  The field the error relates to
  """
  field: String!

  """
  The error message
  """
  message: String!
}

"""
Autogenerated input type of FavoriteBook
"""
input FavoriteBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of FavoriteBook
"""
type FavoriteBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Autogenerated input type of InvalidateToken
"""
input InvalidateTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of InvalidateToken
"""
type InvalidateTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean!
}

"""
Autogenerated input type of LostBook
"""
input LostBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of LostBook
"""
type LostBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

type Mutation {
  """
  Adds a book by ISBN
  """
  addBookByIsbn(input: AddBookByIsbnInput!): AddBookByIsbnPayload

  """
  Adds a book manually
  """
  addBookManually(input: AddBookManuallyInput!): AddBookManuallyPayload

  """
  Checksout a Book
  """
  checkoutBook(input: CheckoutBookInput!): CheckoutBookPayload

  """
  Admin ability to create a user
  """
  createUser(input: CreateUserInput!): CreateUserPayload

  """
  Favorites a Book
  """
  favoriteBook(input: FavoriteBookInput!): FavoriteBookPayload

  """
  Invalidates a user's token
  """
  invalidateToken(input: InvalidateTokenInput!): InvalidateTokenPayload

  """
  Marks a book as lost
  """
  lostBook(input: LostBookInput!): LostBookPayload

  """
  Rates a Book
  """
  rateBook(input: RateBookInput!): RateBookPayload

  """
  When an access token expires this mutation should be hit with a valid
  refresh token. It will issue a new access token and a new refresh token.
  """
  refreshTokens(input: RefreshTokensInput!): RefreshTokensPayload

  """
  Removes a Book
  """
  removeBook(input: RemoveBookInput!): RemoveBookPayload

  """
  Resets the user's password and returns valid tokens
  """
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload

  """
  Returns a Book
  """
  returnBook(input: ReturnBookInput!): ReturnBookPayload

  """
  Triggers a reset password email
  """
  sendResetPassword(input: SendResetPasswordInput!): SendResetPasswordPayload

  """
  Sign the user in
  """
  signInUser(input: SignInUserInput!): SignInUserPayload

  """
  Suspend a user
  """
  suspendUser(input: SuspendUserInput!): SuspendUserPayload

  """
  Unfavorites a Book
  """
  unfavoriteBook(input: UnfavoriteBookInput!): UnfavoriteBookPayload

  """
  Unsuspend a user
  """
  unsuspendUser(input: UnsuspendUserInput!): UnsuspendUserPayload

  """
  Updates a book
  """
  updateBook(input: UpdateBookInput!): UpdateBookPayload

  """
  Updates the password of the current user
  """
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Gets all the books
  """
  book(bookId: ID!): Book!

  """
  Gets all the books
  """
  books(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The column to sort the results by
    """
    sortBy: BookSortByType = TITLE

    """
    The direction to sort the results
    """
    sortDirection: SortDirectionType = ASC
  ): BookConnection!

  """
  Admins can see all books that are currently checked out
  """
  checkedOutBooks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookConnection!

  """
  Returns the currently logged in user
  """
  me: User

  """
  Gets all the books
  """
  myCheckedOutBooks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RentalConnection!

  """
  Gets all the books
  """
  myCheckoutHistory(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RentalConnection!

  """
  Gets all of my favorite books
  """
  myFavoriteBooks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookConnection!

  """
  Gets all the books
  """
  searchBooks(
    """
    The search term to look for books
    """
    term: String!
  ): [Book!]!

  """
  Return the specified user
  """
  user(userId: ID!): User!

  """
  Get all users
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

"""
Autogenerated input type of RateBook
"""
input RateBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  rating: BookRating!
}

"""
Autogenerated return type of RateBook
"""
type RateBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
Autogenerated input type of RefreshTokens
"""
input RefreshTokensInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  refreshToken: String!
}

"""
Autogenerated return type of RefreshTokens
"""
type RefreshTokensPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of RemoveBook
"""
input RemoveBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveBook
"""
type RemoveBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  rentals: [Rental!]
  success: Boolean
}

type Rental implements ActiveRecord {
  book: Book!
  checkedOutAt: ISO8601DateTime!
  checkedOutBy: User!

  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  id: ID!
  returnedAt: ISO8601DateTime

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Rental.
"""
type RentalConnection {
  """
  A list of edges.
  """
  edges: [RentalEdge]

  """
  A list of nodes.
  """
  nodes: [Rental]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RentalEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Rental
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  resetPasswordToken: String!
}

"""
Autogenerated return type of ResetPassword
"""
type ResetPasswordPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
Autogenerated input type of ReturnBook
"""
input ReturnBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ReturnBook
"""
type ReturnBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
Autogenerated input type of SendResetPassword
"""
input SendResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of SendResetPassword
"""
type SendResetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of SignInUser
"""
input SignInUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  refreshToken: String
  user: User
}

"""
The direction to sort results
"""
enum SortDirectionType {
  ASC
  DESC
}

"""
Autogenerated input type of SuspendUser
"""
input SuspendUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of SuspendUser
"""
type SuspendUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of UnfavoriteBook
"""
input UnfavoriteBookInput {
  bookId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnfavoriteBook
"""
type UnfavoriteBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  success: Boolean
}

"""
Autogenerated input type of UnsuspendUser
"""
input UnsuspendUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of UnsuspendUser
"""
type UnsuspendUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

"""
Autogenerated input type of UpdateBook
"""
input UpdateBookInput {
  bookId: ID!
  bookInput: BookInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateBook
"""
type UpdateBookPayload {
  book: Book

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
}

"""
Autogenerated input type of UpdatePassword
"""
input UpdatePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentPassword: String!
  newPassword: String!
}

"""
Autogenerated return type of UpdatePassword
"""
type UpdatePasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Validation error
  """
  errors: [Error]
  user: User
}

type User implements ActiveRecord {
  """
  The date and time when then record was created
  """
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  isAdmin: Boolean!

  """
  The date and time the record was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}